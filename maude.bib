%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/


%% Created for Martin KÃ¼hl at 2010-08-04 00:11:41 +0200 


%% Saved with string encoding Unicode (UTF-8) 



@incollection{Mossakowski:2008,
	Abstract = {CASL is an expressive specification language that has been
designed to supersede many existing algebraic specification
languages and provide a standard. CASL consists of several
layers, including basic (unstructured) specifications,
structured specifications and architectural specifications;
the latter are used to prescribe the modular structure of implementations.

We describe a simplified version of the CASL syntax, semantics
and proof calculus for each of these three layers and state the
corresponding soundness and completeness theorems. The layers
are orthogonal in the sense that the semantics of a given layer 
uses that of the previous layer as a ``black box'', and
similarly for the proof calculi. In particular, this means
that CASL can easily be adapted to other logical systems.

We conclude with a detailed example specification of a warehouse,
which serves to illustrate the application of both CASL and
the proof calculi for the various layers.},
	Author = {Till Mossakowski and Anne Haxthausen and Don Sannella and Andrzej Tarlecki},
	Booktitle = {Logics of specification languages},
	Chapter = {3},
	Date-Added = {2010-08-04 00:04:25 +0200},
	Date-Modified = {2010-08-04 00:11:41 +0200},
	Editor = {D. Bjorner and M. Henson},
	Keywords = {CASL semantics proof strcutred specification architectural},
	Pages = {241-298},
	Pdfurl = {http://www.informatik.uni-bremen.de/~till/papers/db-casl.pdf},
	Psurl = {http://www.informatik.uni-bremen.de/~till/papers/db-casl.ps},
	Publisher = {Springer-Verlag Heidelberg},
	Series = {Monographs in Theoretical Computer Science},
	Status = {Reviewed},
	Title = {{CASL}, the {Common Algebraic Specification Language}},
	Url = {http://dx.doi.org/10.1007/978-3-540-74107-7_5},
	Year = {2008},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-540-74107-7_5}}

@book{Nipkow:2002,
	Address = {Berlin, Heidelberg},
	Author = {Nipkow, Tobias and Wenzel, Markus and Paulson, Lawrence C.},
	Date-Added = {2010-08-02 21:38:12 +0200},
	Date-Modified = {2010-08-02 21:38:20 +0200},
	Isbn = {3-540-43376-7},
	Publisher = {Springer-Verlag},
	Title = {Isabelle/HOL: a proof assistant for higher-order logic},
	Year = {2002}}

@inproceedings{Weidenbach:2009,
	Address = {Berlin, Heidelberg},
	Author = {Weidenbach, Christoph and Dimova, Dilyana and Fietzke, Arnaud and Kumar, Rohit and Suda, Martin and Wischnewski, Patrick},
	Booktitle = {CADE-22: Proceedings of the 22nd International Conference on Automated Deduction},
	Date-Added = {2010-08-02 21:35:26 +0200},
	Date-Modified = {2010-08-02 21:35:36 +0200},
	Doi = {http://dx.doi.org/10.1007/978-3-642-02959-2_10},
	Isbn = {978-3-642-02958-5},
	Location = {Montreal, P.Q., Canada},
	Pages = {140--145},
	Publisher = {Springer-Verlag},
	Title = {SPASS Version 3.5},
	Year = {2009},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-642-02959-2_10}}

@techreport{Duran:1999,
	Author = {Francisco Dur{\'a}n and Jos{\'e} Meseguer},
	Date-Added = {2010-07-30 21:50:40 +0200},
	Date-Modified = {2010-07-30 21:51:54 +0200},
	Doi = {10.1.1.24.3634},
	Institution = {SRI International},
	Title = {The {Maude} Specification of {Full Maude}},
	Year = {1999},
	Bdsk-Url-1 = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.24.3634}}

@inproceedings{Bruni:2003,
	Author = {Roberto Bruni and Jos{\'e} Meseguer},
	Booktitle = {Automata, Languages and Programming. 30th International Colloquium, ICALP 2003, Eindhoven, The Netherlands, June 30 - July 4, 2003. Proceedings},
	Date-Added = {2010-07-30 21:46:43 +0200},
	Date-Modified = {2010-07-30 21:46:57 +0200},
	Editor = {Jos C.~M. Baeten and Jan Karel Lenstra and Joachim Parrow and Gerhard J. Woeginger},
	Pages = {252--266},
	Publisher = {Springer-Verlag},
	Series = {Lecture Notes in Computer Science},
	Title = {Generalized Rewrite Theories},
	Volume = {2719},
	Year = {2003}}

@inproceedings{Clavel:2003,
	Author = {Manuel Clavel and Francisco Dur\'{a}n and Steven Eker and Patrick Lincoln and Narciso Mart\'{\i}-Oliet and Jos\'{e} Meseguer and Carolyn Talcott},
	Booktitle = {Rewriting Techniques and Applications (RTA 2003)},
	Date-Added = {2010-07-30 21:44:27 +0200},
	Date-Modified = {2010-08-04 00:09:08 +0200},
	Editor = {Robert Nieuwenhuis},
	Month = {June},
	Number = {2706},
	Pages = {76-87},
	Publisher = {Springer-Verlag},
	Series = {Lecture Notes in Computer Science},
	Title = {{The {Maude} 2.0 System}},
	Year = {2003}}

@unpublished{Meseguer:2003,
	Author = {Jos{\'e} Meseguer and Christiano O. Braga},
	Date-Added = {2010-07-30 21:43:28 +0200},
	Date-Modified = {2010-07-30 21:43:42 +0200},
	Note = {Submitted for publication},
	Title = {Modular Rewriting Semantics of Programming Languages},
	Year = 2003}

@book{Mosses:2004,
	Author = {Mosses, Peter D.},
	Date-Added = {2010-07-30 15:01:57 +0200},
	Date-Modified = {2010-08-04 00:11:13 +0200},
	Isbn = {3540213015},
	Publisher = {SpringerVerlag},
	Title = {{CASL} Reference Manual: The Complete Documentation Of The Common Algebraic Specification Language (LECTURE NOTES IN COMPUTER SCIENCE)},
	Year = {2004}}

@misc{Goguen:1993,
	Author = {Joseph A. Goguen and Timothy Winkler and Jos{\'e} Meseguer and Kokichi Futatsugi and Jean-Pierre Jouannaud},
	Date-Added = {2010-07-30 14:44:49 +0200},
	Date-Modified = {2010-08-04 00:09:58 +0200},
	Title = {Introducing {OBJ}},
	Year = {1993}}

@book{Clavel:2007,
	Address = {Berlin, Heidelberg},
	Author = {Clavel, Manuel and Dur\'{a}n, Francisco and Eker, Steven and Lincoln, Patrick and Mart\'{\i}-Oliet, Narciso and Meseguer, Jos\'{e} and Talcott, Carolyn},
	Date-Added = {2010-07-30 05:03:33 +0200},
	Date-Modified = {2010-07-30 14:11:14 +0200},
	Isbn = {3-540-71940-7, 978-3-540-71940-3},
	Publisher = {Springer-Verlag},
	Title = {All About Maude - a High-Performance Logical Framework: How to Specify, Program and Verify Systems in Rewriting Logic},
	Year = {2007}}

@article{Meseguer:2007,
	Address = {Essex, UK},
	Author = {Meseguer, Jos\'{e} and Rou, Grigore},
	Date-Added = {2010-07-30 05:03:00 +0200},
	Date-Modified = {2010-07-30 14:50:47 +0200},
	Doi = {http://dx.doi.org/10.1016/j.tcs.2006.12.018},
	Issn = {0304-3975},
	Journal = {Theor. Comput. Sci.},
	Number = {3},
	Pages = {213--237},
	Publisher = {Elsevier Science Publishers Ltd.},
	Title = {The Rewriting Logic Semantics Project},
	Volume = {373},
	Year = {2007},
	Bdsk-Url-1 = {http://dx.doi.org/10.1016/j.tcs.2006.12.018}}

@article{Clavel:2002,
	Address = {Essex, UK},
	Author = {Manuel Clavel and Francisco Dur{\'a}n and Steven Eker and Patrick Lincoln and Narciso Mart{\'\i}-Oliet and Jos{\'e} Meseguer and Jos{\'e} F. Quesada},
	Date-Added = {2010-07-30 05:02:51 +0200},
	Date-Modified = {2010-08-04 00:09:00 +0200},
	Doi = {http://dx.doi.org/10.1016/S0304-3975(01)00359-0},
	Issn = {0304-3975},
	Journal = {Theoretical Computer Science},
	Number = {2},
	Pages = {187--243},
	Publisher = {Elsevier Science Publishers Ltd.},
	Title = {{{Maude}: Specification and Programming in Rewriting Logic}},
	Volume = {285},
	Year = {2002},
	Bdsk-Url-1 = {http://dx.doi.org/10.1016/S0304-3975(01)00359-0}}

@article{Duran:2000,
	Author = {Francisco Dur\'{a}n and Jos\'{e} Meseguer},
	Date-Added = {2010-07-30 05:01:35 +0200},
	Date-Modified = {2010-07-30 14:50:40 +0200},
	Doi = {DOI: 10.1016/S1571-0661(05)80136-7},
	Issn = {1571-0661},
	Journal = {Electronic Notes in Theoretical Computer Science},
	Note = {The 3rd International Workshop on Rewriting Logic and its Applications},
	Pages = {316 - 338},
	Title = {Parameterized Theories and Views in Full Maude 2.0},
	Url = {http://www.sciencedirect.com/science/article/B75H1-4G7MXPH-N/2/500f4cf15e77e508475c749a30a7e802},
	Volume = {36},
	Year = {2000},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/B75H1-4G7MXPH-N/2/500f4cf15e77e508475c749a30a7e802},
	Bdsk-Url-2 = {http://dx.doi.org/10.1016/S1571-0661(05)80136-7}}

@article{Sannella:1988,
	Address = {Duluth, MN, USA},
	Author = {Sannella, Donald and Tarlecki, Andrzej},
	Date-Added = {2010-07-30 04:59:54 +0200},
	Date-Modified = {2010-07-30 14:50:30 +0200},
	Doi = {http://dx.doi.org/10.1016/0890-5401(88)90008-9},
	Issn = {0890-5401},
	Journal = {Inf. Comput.},
	Number = {2-3},
	Pages = {165--210},
	Publisher = {Academic Press, Inc.},
	Title = {Specifications in an Arbitrary Institution},
	Volume = {76},
	Year = {1988},
	Bdsk-Url-1 = {http://dx.doi.org/10.1016/0890-5401(88)90008-9}}

@book{CafeObjRep,
	Author = {R\u{a}zvan Diaconescu and Kokichi Futatsugi},
	Date-Added = {2010-07-30 04:57:31 +0200},
	Date-Modified = {2010-07-30 14:13:03 +0200},
	Publisher = {World Scientific},
	Series = {AMAST Series in Computing},
	Title = {CafeOBJ Report: The Language, Proof Techniques, and Methodologies for Object-Oriented Algebraic Specification},
	Volume = {6},
	Year = {1998}}

@inproceedings{Meseguer:1992,
	Address = {Essex, UK},
	Author = {Meseguer, Jos\'{e}},
	Booktitle = {Selected papers of the Second Workshop on Concurrency and compositionality},
	Date-Added = {2010-07-30 04:52:29 +0200},
	Date-Modified = {2010-08-04 00:10:11 +0200},
	Doi = {http://dx.doi.org/10.1016/0304-3975(92)90182-F},
	Location = {San Miniato, Italy},
	Pages = {73--155},
	Publisher = {Elsevier Science Publishers Ltd.},
	Title = {{Conditional Rewriting Logic as a Unified Model of Concurrency}},
	Year = {1992},
	Bdsk-Url-1 = {http://dx.doi.org/10.1016/0304-3975(92)90182-F}}

@article{Astesiano:2002,
	Author = {Egidio Astesiano and Michel Bidoit and H{\'e}l{\`e}ne Kirchner and Bernd Krieg-Br{\"u}ckner and Peter D. Mosses and Donald Sannella and Andrzej Tarlecki},
	Date-Added = {2010-07-30 04:51:01 +0200},
	Date-Modified = {2010-08-04 00:08:20 +0200},
	Doi = {DOI: 10.1016/S0304-3975(01)00368-1},
	Issn = {0304-3975},
	Journal = {Theoretical Computer Science},
	Number = {2},
	Pages = {153 - 196},
	Title = {{CASL}: the {Common Algebraic Specification Language}},
	Url = {http://www.sciencedirect.com/science/article/B6V1G-44J1KNN-1/2/2684b27bfc05737dda005305d01c9b09},
	Volume = {286},
	Year = {2002},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/B6V1G-44J1KNN-1/2/2684b27bfc05737dda005305d01c9b09},
	Bdsk-Url-2 = {http://dx.doi.org/10.1016/S0304-3975(01)00368-1}}

@inproceedings{Mossakowski:2007,
	Abstract = {Heterogeneous specification becomes more and more important because
complex systems are often specified using multiple viewpoints,
involving multiple formalisms. Moreover, a formal software development
process may lead to a change of formalism during the development.
However, current research in integrated formal methods only deals
with ad-hoc integrations of different formalisms.

The heterogeneous tool set (Hets) is a parsing, static analysis and
proof management tool combining various such tools for individual
specification languages, thus providing a tool for heterogeneous
multi-logic specification. Hets is based on a graph of logics and
languages (formalized as so-called institutions), their tools, and
their translations.  This provides a clean semantics of heterogeneous
specification, as well as a corresponding proof calculus. For proof
management, the calculus of development graphs (known from other
large-scale proof management systems) has been adapted to
heterogeneous specification. Development graphs provide an overview of
the (heterogeneous) specification module hierarchy and the current
proof state, and thus may be used for monitoring the overall
correctness of a heterogeneous development.},
	Author = {Till Mossakowski and Christian Maeder and Klaus L{\"u}ttich},
	Booktitle = {TACAS 2007},
	Date-Added = {2010-07-30 04:40:24 +0200},
	Date-Modified = {2010-07-30 14:49:06 +0200},
	Editor = {Orna Grumberg and Michael Huth},
	Keywords = {proof heterogeneity logic institution prover theorem integration development graph},
	Pages = {519-522},
	Pdfurl = {http://www.informatik.uni-bremen.de/~till/papers/hets-tacas-toolpaper.pdf},
	Psurl = {http://www.informatik.uni-bremen.de/~till/papers/hets-tacas-toolpaper.ps},
	Publisher = {Springer-Verlag Heidelberg},
	Series = {Lecture Notes in Computer Science},
	Status = {Reviewed},
	Title = {The {H}eterogeneous {T}ool {S}et},
	Volume = {4424},
	Year = {2007}}

@inproceedings{Codescu:2010,
	Abstract = {Maude modules can be understood as models that can be
formally analyzed and verified with respect to different properties expressing
various formal requirements. However, Maude lacks the formal
tools to perform some of these analyses and thus they can only be done
by hand. The Heterogeneous Tool Set Hets is an institution-based combination
of different logics and corresponding rewriting, model checking
and proof tools. We present in this paper an integration of Maude into
Hets that allows to use the logics and tools already integrated in Hets
with Maude specifications. To achieve such integration we have dened
an institution for Maude based on preordered algebras and a comorphism
between Maude and CASL, the central logic in Hets.},
	Author = {Mihai Codescu and Till Mossakowski and Adr{\'\i}an Riesco and Christian Maeder},
	Booktitle = {AMAST 2010},
	Date-Modified = {2010-08-04 00:09:31 +0200},
	Editor = {Mike Johnson and Dusko Pavlovic},
	Keywords = {Maude CASL Hets institution comorphism refinement},
	Pdfurl = {http://www.informatik.uni-bremen.de/~till/papers/Maude-Hets.pdf},
	Publisher = {Springer},
	Series = {Lecture Notes in Computer Science},
	Status = {Reviewed},
	Title = {{Integrating Maude into Hets}},
	Year = {2010}}

@article{Mossakowski:2002a,
	Abstract = {In this work, we consider various specification specification languages and their relation to CASL, the recently developed Common Algebraic Specification Language. In particular, we consider the languages Larch, OBJ3, ACT, ASF, and HEP-theories. We also consider various sublanguages of CASL that more or less directly correspond to these. All these languages are translated to an appropriate sublanguage of CASL. The translation considers only the level of specification in-the-small: the logics underlying the languages are formalized as institutions, and representations among the institutions are developed. The institution representations concern on one hand the translation of the CASL institution (and some of its subinstitutions) to simpler subinstitutions. Given a theorem proving tool for such a simpler subinstitutions, with the help of such a representation, it can also be used for the more complex institution. Thus, first-order theorem provers or conditional term rewriting tools become usable for CASL. On the other hand, we set up institution representations between the underlying institution of any of the abovementioned specification languages and an appropriate subinstitution of CASL. This allows to take libraries and case studies that have been developed for other languages and re-use them in CASL. },
	Author = {T. Mossakowski},
	Date-Modified = {2010-07-30 14:48:01 +0200},
	Journal = {Theoretical Computer Science},
	Pages = {367--475},
	Psurl = {http://www.informatik.uni-bremen.de/~till/papers/RelatingCASL.ps},
	Status = {Reviewed},
	Title = {Relating CASL with Other Specification Languages: the Institution Level},
	Url = {http://dx.doi.org/10.1016/S0304-3975(01)00369-3},
	Volume = {286},
	Year = {2002},
	Bdsk-Url-1 = {http://dx.doi.org/10.1016/S0304-3975(01)00369-3}}

@inproceedings{Mossakowski:2002b,
	Abstract = {In order to obtain a semantic foundation for heterogeneous specification, we extend Diaconescu's morphism-based Grothendieck institutions to the case of comorphisms. This is not just a dualization, because we obtain more general results, especially concerning amalgamation properties. We also introduce a proof calculus for structured heterogeneous specifications and study its soundness and completeness (where amalgamation properties play a role for obtaining the latter).},
	Author = {T. Mossakowski},
	Booktitle = {Mathematical foundations of computer science},
	Date-Modified = {2010-07-30 14:47:52 +0200},
	Editor = {K. Diks and W. Rytter},
	Pages = {593--604},
	Psurl = {http://www.informatik.uni-bremen.de/~till/papers/grothendieck.ps},
	Publisher = {Springer Verlag, London},
	Series = {Lecture Notes in Computer Science},
	Status = {Reviewed},
	Title = {Comorphism-based {G}rothendieck logics},
	Url = {http://www.springerlink.com/(bt4qw245oavupgzdxw3zpuul)/app/home/contribution.asp?referrer=parent&backto=searchcitationsresults,1,1;},
	Volume = {2420},
	Year = {2002},
	Bdsk-Url-1 = {http://www.springerlink.com/(bt4qw245oavupgzdxw3zpuul)/app/home/contribution.asp?referrer=parent&backto=searchcitationsresults,1,1;}}

@techreport{Mossakowski:2006b,
	Abstract = {The Heterogeneous Tool Set (Hets) is the main analysis tool
for the specification language heterogeneous CASL. Heterogeneous
CASL (HetCASL) combines the specification language CASL with CASL extensions
and sublanguages, as well as completely different logics and even
programming languages such as Haskell. HetCASL
extends the structuring mechanisms of CASL:
Basic specifications are
unstructured specifications or modules written in a specific logic.
HEts is based on a graph of  logics and logic translations (the
latter are also called comorphisms).

With heterogeneous structured specifications, it is possible to
combine and rename specifications, hide parts thereof, and also
translate them to other logics. 

Hets consists of logic-specific tools for the parsing and static
analysis of the different involved logics, as well as a
logic-independent parsing and static analysis tool for structured and
architectural specifications and libraries. The latter of course needs
to call the logic-specific tools whenever a basic specification is
encountered.},
	Author = {Till Mossakowski and Christian Maeder and Klaus L{\"u}ttich and Dominik L{\"u}cke},
	Date-Modified = {2010-08-04 00:10:54 +0200},
	Institution = {Department of Computer Science; Universit{\"a}t Bremen; http://www.informatik.uni-bremen.de/},
	Keywords = {heterogeneous specifiation analysis proof tool},
	Pdfurl = {http://www.informatik.uni-bremen.de/agbkb/forschung/formal_methods/CoFI/hets/UserGuide.pdf},
	Status = {Other},
	Title = {{Hets User Guide}},
	Year = {2010}}

@inproceedings{Mossakowski:2005a,
	Abstract = {This paper builds on the theory of institutions, a version of abstract model theory that emerged in computer science studies of software specification and semantics. To handle proof theory, our institutions use an extension of traditional categorical logic with sets of sentences as objects instead of single sentences, and with morphisms representing proofs as usual. A natural equivalence relation on institutions is defined such that its equivalence classes are logics. Several invariants are defined for this equivalence, including a Lindenbaum algebra construction, its generalization to a Lindenbaum category construction that includes proofs, and model cardinality spectra; these are used in some examples to show logics inequivalent. Generalizations of familiar results from first order to arbitrary logics are also discussed, including Craig interpolation and Beth definability.},
	Author = {Till Mossakowski and Joseph Goguen and Razvan Diaconescu and Andrzej Tarlecki},
	Booktitle = {Logica Universalis},
	Date-Modified = {2010-08-04 00:10:58 +0200},
	Editor = {Jean-Yves Beziau},
	Pages = {113-133},
	Pdfurl = {http://www.informatik.uni-bremen.de/~till/papers/nel05.pdf},
	Publisher = {Birkh{\"a}user},
	Status = {Reviewed},
	Title = {{What is a Logic?}},
	Url = {http://www.springer.com/sgw/cda/frontpage/0,11855,1-40353-22-44948613-detailsPage%253Dppmmedia%257Ctoc%257Ctoc,00.html},
	Year = {2005},
	Bdsk-Url-1 = {http://www.springer.com/sgw/cda/frontpage/0,11855,1-40353-22-44948613-detailsPage%253Dppmmedia%257Ctoc%257Ctoc,00.html}}

@article{Mossakowski:2006a,
	Abstract = {Development graphs are a tool for dealing with structured
  specifications in a formal program development in order to ease the
  management of change and reusing proofs. In this work, we extend
  development graphs with hiding (e.g. hidden operations).  Hiding is
  a particularly difficult to realize operation, since it does not
  admit such a good decomposition of the involved specifications as
  other structuring operations do. We develop both a semantics and
  proof rules for development graphs with hiding. The rules are proven
  to be sound, and also complete relative to an oracle for
  conservative extensions. We also show that an absolutely complete set
  of rules cannot exist. 

  The whole framework is developed in a way independent of the
  underlying logical system (and thus also does not prescribe the
  nature of the parts of a specification that may be hidden).  We also
  show how various other logic independent specification formalisms
  can be mapped into development graphs; thus, development graphs can
  serve as a kernel formalism for management of proofs and of change.},
	Author = {T. Mossakowski and S. Autexier and D. Hutter},
	Date-Modified = {2010-08-04 00:10:25 +0200},
	Issn = {1567-8326},
	Journal = {Journal of Logic and Algebraic Programming},
	Keywords = {development graph proof logic institution completeness},
	Number = {1-2},
	Pages = {114-145},
	Psurl = {http://www.informatik.uni-bremen.de/~till/papers/dgh_journal.ps},
	Status = {Reviewed},
	Title = {{Development Graphs -- Proof Management for Structured Specifications}},
	Url = {http://www.sciencedirect.com/science?_ob=GatewayURL&_origin=CONTENTS&_method=citationSearch&_piikey=S1567832605000810&_version=1&md5=7c18897e9ffad42e0649c6b41203f41e},
	Volume = {67},
	Year = {2006},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science?_ob=GatewayURL&_origin=CONTENTS&_method=citationSearch&_piikey=S1567832605000810&_version=1&md5=7c18897e9ffad42e0649c6b41203f41e}}

@incollection{Mosses:2008,
	Abstract = {CASL is an expressive specification language that has been
designed to supersede many existing algebraic specification
languages and provide a standard. CASL consists of several
layers, including basic (unstructured) specifications,
structured specifications and architectural specifications;
the latter are used to prescribe the modular structure of implementations.

We describe a simplified version of the CASL syntax, semantics
and proof calculus for each of these three layers and state the
corresponding soundness and completeness theorems. The layers
are orthogonal in the sense that the semantics of a given layer 
uses that of the previous layer as a ``black box'', and
similarly for the proof calculi. In particular, this means
that CASL can easily be adapted to other logical systems.

We conclude with a detailed example specification of a warehouse,
which serves to illustrate the application of both CASL and
the proof calculi for the various layers.},
	Author = {Mosses, Peter D.},
	Booktitle = {Logics of specification languages},
	Chapter = {3},
	Date-Modified = {2010-08-04 00:11:34 +0200},
	Editor = {D. Bjorner and M. Henson},
	Pages = {241-298},
	Publisher = {Springer-Verlag Heidelberg},
	Series = {Monographs in Theoretical Computer Science},
	Title = {{A View of the {CASL}}},
	Year = {2008},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-540-74107-7_5}}
